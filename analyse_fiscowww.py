# -*- coding: utf-8 -*-
"""analyse_fiscowww.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wfn_sry1hbMH4S-BSW5thsL2zheQuRRP
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import ast

data=pd.read_excel('/content/output_file.xlsx')
data

df=data[20:900]
df

Livres=df["Order"].tolist()
Livres

da=pd.DataFrame([
  {'Title': 'The Hating Game', 'Category': 'Romance'},
  {'Title': 'Emma', 'Category': 'Romance'},
  {'Title': 'A Walk to Remember', 'Category': 'Romance'},
  {'Title': 'Gone with the Wind', 'Category': 'Romance'},
  {'Title': 'Me Before You', 'Category': 'Romance'},
  {'Title': 'The Princess Bride', 'Category': 'Romance'},
  {'Title': 'Wuthering Heights', 'Category': 'Romance'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Romance'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Romance'},
  {'Title': 'Pride and Prejudice', 'Category': 'Romance'},
  {'Title': 'Sense and Sensibility', 'Category': 'Romance'},
  {'Title': 'The Rosie Project', 'Category': 'Romance'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Romance'},
  {'Title': 'The Great Gatsby', 'Category': 'Romance'},
  {'Title': 'Twilight', 'Category': 'Romance'},
  {'Title': 'Romeo and Juliet', 'Category': 'Romance'},
  {'Title': 'The Notebook', 'Category': 'Romance'},
  {'Title': 'Outlander', 'Category': 'Romance'},
  {'Title': 'The Hating Game', 'Category': 'Science Fiction'},
  {'Title': 'Emma', 'Category': 'Mystery'},
  {'Title': 'A Walk to Remember', 'Category': 'Romance'},
  {'Title': 'Gone with the Wind', 'Category': 'Fantasy'},
  {'Title': 'Me Before You', 'Category': 'Romance'},
  {'Title': 'Emma', 'Category': 'Thriller'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Fiction'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Biography'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Non-fiction'},
  {'Title': 'Jane Eyre', 'Category': 'Self-help'},
  {'Title': 'Emma', 'Category': 'Romance'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Science Fiction'},
  {'Title': 'Jane Eyre', 'Category': 'Mystery'},
  {'Title': 'Pride and Prejudice', 'Category': 'Romance'},
  {'Title': 'Sense and Sensibility', 'Category': 'Thriller'},
  {'Title': 'Gone with the Wind', 'Category': 'Fantasy'},
  {'Title': 'Jane Eyre', 'Category': 'Non-fiction'},
  {'Title': 'Sense and Sensibility', 'Category': 'Biography'},
  {'Title': 'The Rosie Project', 'Category': 'Self-help'},
  {'Title': 'The Hating Game', 'Category': 'Fiction'},
  {'Title': 'Emma', 'Category': 'Science Fiction'},
  {'Title': 'The Princess Bride', 'Category': 'Mystery'},
  {'Title': 'A Walk to Remember', 'Category': 'Romance'},
  {'Title': 'Twilight', 'Category': 'Fantasy'},
  {'Title': 'Outlander', 'Category': 'Romance'},
  {'Title': 'The Hating Game', 'Category': 'Thriller'},
  {'Title': 'Jane Eyre', 'Category': 'Fiction'},
  {'Title': 'Sense and Sensibility', 'Category': 'Biography'},
  {'Title': 'Gone with the Wind', 'Category': 'Non-fiction'},
  {'Title': 'The Great Gatsby', 'Category': 'Self-help'},
  {'Title': 'The Rosie Project', 'Category': 'Science Fiction'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Mystery'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Romance'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Fantasy'},
  {'Title': 'The Great Gatsby', 'Category': 'Fiction'},
  {'Title': 'Emma', 'Category': 'Science Fiction'},
  {'Title': 'Jane Eyre', 'Category': 'Mystery'},
  {'Title': 'A Walk to Remember', 'Category': 'Romance'},
  {'Title': 'Gone with the Wind', 'Category': 'Fantasy'},
  {'Title': 'Me Before You', 'Category': 'Romance'},
  {'Title': 'The Princess Bride', 'Category': 'Thriller'},
  {'Title': 'Wuthering Heights', 'Category': 'Biography'},
  {'Title': 'Sense and Sensibility', 'Category': 'Self-help'},
  {'Title': 'Pride and Prejudice', 'Category': 'Science Fiction'},
  {'Title': 'The Rosie Project', 'Category': 'Mystery'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Romance'},
  {'Title': 'Outlander', 'Category': 'Fantasy'},
  {'Title': 'The Hating Game', 'Category': 'Fiction'},
  {'Title': 'The Notebook', 'Category': 'Science Fiction'},
  {'Title': 'The Princess Bride', 'Category': 'Mystery'},
  {'Title': 'The Rosie Project', 'Category': 'Romance'},
  {'Title': 'A Walk to Remember', 'Category': 'Fantasy'},
  {'Title': 'Wuthering Heights', 'Category': 'Thriller'},
  {'Title': 'Sense and Sensibility', 'Category': 'Biography'},
  {'Title': 'Jane Eyre', 'Category': 'Non-fiction'},
  {'Title': 'Pride and Prejudice', 'Category': 'Self-help'},
  {'Title': 'Emma', 'Category': 'Fiction'},
  {'Title': 'The Hating Game', 'Category': 'Science Fiction'},
  {'Title': 'The Great Gatsby', 'Category': 'Mystery'},
  {'Title': 'Me Before You', 'Category': 'Romance'},
  {'Title': 'Gone with the Wind', 'Category': 'Fantasy'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Romance'},
  {'Title': 'Jane Eyre', 'Category': 'Thriller'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Biography'},
  {'Title': 'Twilight', 'Category': 'Self-help'},
  {'Title': 'Romeo and Juliet', 'Category': 'Science Fiction'},
  {'Title': 'The Notebook', 'Category': 'Mystery'},
  {'Title': 'Outlander', 'Category': 'Romance'},
  {'Title': 'The Hating Game', 'Category': 'Fantasy'},
  {'Title': 'The Rosie Project', 'Category': 'Fiction'},
  {'Title': 'Sense and Sensibility', 'Category': 'Science Fiction'},
  {'Title': 'The Great Gatsby', 'Category': 'Mystery'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Romance'},
  {'Title': 'The Princess Bride', 'Category': 'Fantasy'},
  {'Title': 'Pride and Prejudice', 'Category': 'Romance'},
  {'Title': 'Gone with the Wind', 'Category': 'Science Fiction'},
  {'Title': 'Wuthering Heights', 'Category': 'Mystery'},
  {'Title': 'A Walk to Remember', 'Category': 'Romance'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Fantasy'},
  {'Title': 'Me Before You', 'Category': 'Romance'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Thriller'},
  {'Title': 'Jane Eyre', 'Category': 'Biography'},
  {'Title': 'The Rosie Project', 'Category': 'Self-help'},
  {'Title': 'Romeo and Juliet', 'Category': 'Fiction'},
  {'Title': 'The Notebook', 'Category': 'Science Fiction'},
  {'Title': 'Twilight', 'Category': 'Mystery'},
  {'Title': 'Outlander', 'Category': 'Romance'},
  {'Title': 'The Hating Game', 'Category': 'Fantasy'},
  {'Title': 'The Great Gatsby', 'Category': 'Science Fiction'},
  {'Title': 'Wuthering Heights', 'Category': 'Mystery'},
  {'Title': 'Pride and Prejudice', 'Category': 'Romance'},
  {'Title': 'Gone with the Wind', 'Category': 'Science Fiction'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Mystery'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Romance'},
  {'Title': 'The Princess Bride', 'Category': 'Fantasy'},
  {'Title': 'Sense and Sensibility', 'Category': 'Fiction'},
  {'Title': 'A Walk to Remember', 'Category': 'Science Fiction'},
  {'Title': 'Jane Eyre', 'Category': 'Mystery'},
  {'Title': 'The Rosie Project', 'Category': 'Romance'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Fantasy'},
  {'Title': 'Romeo and Juliet', 'Category': 'Fiction'},
  {'Title': 'The Notebook', 'Category': 'Self-help'},
  {'Title': 'Outlander', 'Category': 'Biography'},
  {'Title': 'Twilight', 'Category': 'Non-fiction'},
  {'Title': 'The Hating Game', 'Category': 'Biography'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Mystery'},
  {'Title': 'The Great Gatsby', 'Category': 'Science Fiction'},
  {'Title': 'The Rosie Project', 'Category': 'Fiction'},
  {'Title': 'Pride and Prejudice', 'Category': 'Science Fiction'},
  {'Title': 'Sense and Sensibility', 'Category': 'Mystery'},
  {'Title': 'Gone with the Wind', 'Category': 'Fiction'},
  {'Title': 'Wuthering Heights', 'Category': 'Self-help'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Biography'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Non-fiction'},
  {'Title': 'Romeo and Juliet', 'Category': 'Fiction'},
  {'Title': 'Twilight', 'Category': 'Science Fiction'},
  {'Title': 'Outlander', 'Category': 'Biography'},
  {'Title': 'The Hating Game', 'Category': 'Mystery'},
  {'Title': 'Jane Eyre', 'Category': 'Self-help'},
  {'Title': 'Emma', 'Category': 'Science Fiction'},
  {'Title': 'The Princess Bride', 'Category': 'Mystery'},
  {'Title': 'A Walk to Remember', 'Category': 'Romance'},
  {'Title': 'Gone with the Wind', 'Category': 'Fantasy'},
  {'Title': 'Me Before You', 'Category': 'Romance'},
  {'Title': 'The Great Gatsby', 'Category': 'Thriller'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Biography'},
  {'Title': 'Romeo and Juliet', 'Category': 'Self-help'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Mystery'},
  {'Title': 'The Rosie Project', 'Category': 'Fiction'},
  {'Title': 'Pride and Prejudice', 'Category': 'Science Fiction'},
  {'Title': 'Twilight', 'Category': 'Biography'},
  {'Title': 'Wuthering Heights', 'Category': 'Non-fiction'},
  {'Title': 'Sense and Sensibility', 'Category': 'Fantasy'},
  {'Title': 'A Walk to Remember', 'Category': 'Fiction'},
  {'Title': 'The Princess Bride', 'Category': 'Mystery'},
  {'Title': 'The Hating Game', 'Category': 'Romance'},
  {'Title': 'Emma', 'Category': 'Fantasy'},
  {'Title': 'Jane Eyre', 'Category': 'Science Fiction'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Self-help'},
  {'Title': 'Gone with the Wind', 'Category': 'Mystery'},
  {'Title': 'The Great Gatsby', 'Category': 'Biography'},
  {'Title': 'To All the Boys I\'ve Loved Before', 'Category': 'Fiction'},
  {'Title': 'Romeo and Juliet', 'Category': 'Non-fiction'},
  {'Title': 'Me Before You', 'Category': 'Fantasy'},
  {'Title': 'The Notebook', 'Category': 'Fiction'},
  {'Title': 'The Rosie Project', 'Category': 'Science Fiction'},
  {'Title': 'Twilight', 'Category': 'Self-help'},
  {'Title': 'Outlander', 'Category': 'Biography'},
  {'Title': 'The Hating Game', 'Category': 'Mystery'},
  {'Title': 'Jane Eyre', 'Category': 'Science Fiction'},
  {'Title': 'The Fault in Our Stars', 'Category': 'Fiction'},
  {'Title': 'Sense and Sensibility', 'Category': 'Fantasy'},
  {'Title': 'A Walk to Remember', 'Category': 'Biography'},
  {'Title': 'The Princess Bride', 'Category': 'Non-fiction'},
  {'Title': 'Eleanor Oliphant Is Completely Fine', 'Category': 'Fiction'},
  {'Title': 'Pride and Prejudice', 'Category': 'Thriller'},
  {'Title': 'Gone with the Wind', 'Category': 'Self-help'},
  {'Title': 'The Great Gatsby', 'Category': 'Mystery'},])


da.head()

da.to_csv("data_training.csv",index=False)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score


dtt = pd.read_csv("/content/data_training.csv")


X_train, X_test, y_train, y_test = train_test_split(dtt['Title'], dtt['Category'], test_size=0.2, random_state=42)
vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)
classifier = MultinomialNB()
classifier.fit(X_train_vec, y_train)
y_pred = classifier.predict(X_test_vec)
accuracy = accuracy_score(y_test, y_pred)
print(f"Précision du modèle : {accuracy * 100:.2f}%")

def display_prediction(title):
    title_vec = vectorizer.transform([title])
    category_predicted = classifier.predict(title_vec)
    print(f"Le livre '{title}' est prédit comme appartenant à la catégorie '{category_predicted[0]}'.")


display_prediction("zebe")

def predict_categories(data):

    titles = data['Order']
    titles_vec = vectorizer.transform(titles)
    categories_predicted = classifier.predict(titles_vec)


    result_df = pd.DataFrame({
        'Title': titles,
        'Predicted_Category': categories_predicted
    })


    result_df.to_csv('predicted_categories.csv', index=False)
    print("Fichier 'predicted_categories.csv' créé avec succès.")


predict_categories(df)

result=pd.read_csv("/content/predicted_categories.csv")
result

counts=result['Predicted_Category'].value_counts()
counts.plot(kind='bar', rot=45, color='skyblue')
plt.title('Histogramme des catégories')
plt.xlabel('Catégorie')
plt.ylabel('Nombre d\'occurrences')
plt.show()

df.isna().sum()

dtt=data.iloc[26:]
dtt.head()

dtt.isna().sum()

worldcities=pd.read_csv("/content/worldcities.csv")

worldcities.head()

df_maroc=worldcities[worldcities["country"]=='Morocco']
df_maroc.head()

def trouver_ville(adresse):
    if pd.notnull(adresse):
        for ville in df_maroc['city']:
            if ville.lower() in adresse.lower():
                return ville
        return "Fès"
    else:
        return "Fès"

dtt['Adresse']=dtt['Adresse'].apply(trouver_ville)

dtt['Adresse']=dtt["Adresse"].fillna(dtt['Adresse'])

dtt

from matplotlib import pyplot as plt
import seaborn as sns
dtt.groupby('Adresse').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

ID=data['ID'].copy()

dtt

import folium
from folium.plugins import MarkerCluster
import pandas as pd


m = folium.Map(location=[31.7917, -7.0926], zoom_start=6)

villes_tracees = set()


marker_cluster = MarkerCluster().add_to(m)

nombre_villes_affichees_initialement = 50
dtt_limite = dtt.head(nombre_villes_affichees_initialement)

for index, row in dtt_limite.iterrows():
    ville = row['Adresse']


    if ville not in villes_tracees:
        ville_coords = worldcities[worldcities['city'] == ville]

        if not ville_coords.empty:
            latitude = ville_coords.iloc[0]['lat']
            longitude = ville_coords.iloc[0]['lng']


            folium.Marker([latitude, longitude], popup=ville).add_to(marker_cluster)


            villes_tracees.add(ville)


folium.LayerControl().add_to(m)


m.save('carte_maroc.html')

import pandas as pd

# Exemple de données
data_villes = {
    'Ville': ['Ville1', 'Ville2', 'Ville3'],
    'Longitude': ['on1', 'lon2', 'lon3'],
    'Latitude': ['lat1', 'lat2', 'lat3']
}
data_adresses = {
    'Adresse': ['123, rue A, Ville1', '456, rue B, Ville2', '789, rue C, Ville3']
}

# Création des DataFrames
df_villes = pd.DataFrame(data_villes)
df_adresses = pd.DataFrame(data_adresses)

# Extraction du nom de la ville de la colonne 'Adresse'
df_adresses['Ville'] = df_adresses['Adresse'].apply(lambda x: x.split(',')[-1].strip())

# Fusion des DataFrames sur le nom de la ville
df_fusion = pd.merge(df_adresses, df_villes, on='Ville', how='left')

print(df_fusion)

dtt=dtt.drop("Ville",axis=1)
dtt

dictt=dtt["Adresse"].value_counts().to_dict()
dictt

dtt=dtt.assign(**dictt)
dtt

dtt["ID"].value_counts()

data['Price'].describe()

data["Price"].isna().sum()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import OneHotEncoder


df = pd.read_excel("/content/output_file.xlsx")

df['Price'] = pd.to_numeric(df['Price'], errors='coerce')  # Convertir en NaN les non numériques
df = df.dropna(subset=['Price'])
encoder = OneHotEncoder()
encoded_addresses = encoder.fit_transform(df[['Adresse']])
X = encoded_addresses.toarray()
y = df['Price'].astype(float)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Erreur quadratique moyenne: {mse}')

import matplotlib.pyplot as plt

y_pred = model.predict(X_test)

df_predictions = pd.DataFrame({'Valeurs Réelles': y_test, 'Prédictions': y_pred})
df_predictions = df_predictions.reset_index(drop=True)

plt.figure(figsize=(10, 6))
plt.plot(df_predictions['Valeurs Réelles'], label='Valeurs Réelles', color='blue')
plt.plot(df_predictions['Prédictions'], label='Prédictions', color='red')
plt.title('Comparaison des Valeurs Réelles et des Prédictions')
plt.xlabel('Numéro d\'échantillon')
plt.ylabel('Price')
plt.legend()
plt.show()

import pandas as pd


df=pd.read_excel("/content/output_file.xlsx")

df_maroc=worldcities[worldcities["country"]=='Morocco']


df_maroc = df_maroc[df_maroc["country"] == 'Morocco']

# Extraction du nom de la ville de la colonne 'Adresse' dans df
df['Ville'] = df['Adresse'].apply(lambda x: x.split(',')[0].strip()) # Assurez-vous que cela extrait correctement le nom de la ville

# Fusion des DataFrames sur le nom de la ville
# Assurez-vous que les noms des colonnes correspondent ('Ville' dans df et 'city' dans df_maroc)
df_fusion = pd.merge(df, df_maroc, left_on='Ville', right_on='city', how='left')

print(df_fusion)

dtt

df_maroc = df_maroc[df_maroc["country"] == 'Morocco'].drop_duplicates(subset='city')
coords_dict = df_maroc.set_index('city')[['lat', 'lng']].to_dict('index')

dtt['Adresse'] = dtt['Adresse'].astype(str)
def get_coords(city, coords_dict):
    return coords_dict.get(city, {}).get('lat'), coords_dict.get(city, {}).get('lng')
dtt[['Latitude', 'Longitude']] = dtt['Adresse'].apply(
    lambda x: get_coords(x.split(',')[0].strip(), coords_dict)
).apply(pd.Series)

dtt.head()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
import pandas as pd


dtt['Price'] = pd.to_numeric(dtt['Price'], errors='coerce')
dtt = dtt.dropna(subset=['Price'])
dtt["vente"]=(dtt["Price"]>200).astype(int)
X = dtt[['Longitude', 'Latitude']]
y = dtt['vente']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)


predictions = model.predict(X_test)
print(classification_report(y_test, predictions))
print("Précision :", accuracy_score(y_test, predictions))

df_maroc["city"].values

dff=pd.read_csv("/content/worldcities.csv")


def predire_vente(nom_ville, modele, df=df_maroc):
    mom_colonne_ville = 'city'
    if nom_ville in df[mon_colonne_ville].values:
        ville_data = df[df[mon_colonne_ville] == nom_ville]
        longitude = ville_data['lng'].iloc[0]
        latitude = ville_data['lat'].iloc[0]
        prediction = modele.predict([[longitude, latitude]])
        return "Oui" if prediction[0] == 1 else "Non"
    else:
        return "Ville non trouvée"

nom_ville = 'Fès'
prediction = predire_vente(nom_ville, df, model)
print("Prédiction de vente à", nom_ville, ":", prediction)

def predire_vente(nom_ville, modele, df):
    """
    Prédit si une vente aura lieu dans une ville donnée.

    :param nom_ville: Nom de la ville pour laquelle faire la prédiction.
    :param modele: Modèle de machine learning entraîné pour faire des prédictions.
    :param df: DataFrame contenant les noms des villes et leurs coordonnées.
    :return: Prédiction de vente.
    """
    # Assurez-vous que le nom de la colonne de la ville dans df est correctement référencé
    nom_colonne_ville = 'city' # ou 'city', selon la structure de votre df

    # Recherche des coordonnées de la ville
    if nom_ville in df[nom_colonne_ville].values:
        ville_data = df[df[nom_colonne_ville] == nom_ville]
        longitude = ville_data['lng'].iloc[0] # Assurez-vous que ces noms de colonnes correspondent à votre df
        latitude = ville_data['lat'].iloc[0]

        # Utilisation du modèle pour prédire
        prediction = modele.predict([[longitude, latitude]])
        return "Oui" if prediction[0] == 1 else "Non"
    else:
        return "Ville non trouvée"

nom_ville = 'Fès'
prediction = predire_vente(nom_ville, model, df_maroc)
print("Prédiction de vente à", nom_ville, ":", prediction)

L=[]
for ville in df_maroc["city"].values:
  P=predire_vente(ville,model,df_maroc)
  L.append((ville,P))

L